#include "levinson.h"
#include "action_layer.h"
#include "eeconfig.h"
#include "quantum.h"
extern keymap_config_t keymap_config;

#define SIDE

#define MODS_CTRL_MASK  (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT))

// Each layer gets a name for readability, which is then used in the keymap matrix below.
// The underscores don't mean anything - you can have a layer called STUFF or any other name.
// Layer names don't all need to be of the same length, obviously, and you can also skip them
// entirely and just use numbers.
//#define _COLEMAK 0
//#define _NUM 3
//#define _SYM 4
//#define _i3 5
//#define _MOV 6
//#define _SFT 7

enum custom_keycodes {
  COLEMAK = SAFE_RANGE,
  QWERTY,
  SYM,
  NUM,
  MOV,
  i3_S_1,
  i3_S_2,
  i3_S_3,
  i3_S_4,
  i3_S_5,
  i3_S_6,
  i3_S_7,
  i3_S_8,
  i3_S_9,
  CUS_COMM,
  CUS_DOT,
  SHIFT,
};


enum satan_layers {
    _QWERTY,
    _COLEMAK,
    _NUM,
    _SYM, //Gleicher Layer wie FUNC1. Brauche ich nur um mit beiden Tasten in den ADJUST-Layer zu kommen.
    _i3,
    _MOV,
    _ADJUST,
};


// Fillers to make layering more clear
#define TAB_SYM      LT(_SYM,KC_TAB)
#define ESC_NUM      LT(_NUM,KC_ESC)
#define ENT_SFTR     MT(MOD_LSFT,KC_ENT)
#define SPC_SFTL     MT(MOD_LSFT,KC_SPC)
#define OSM_ALT      OSM(MOD_LALT)
#define OSM_GUI      OSM(MOD_LGUI)
#define OSM_CTL      OSM(MOD_LCTL)
#define TD_BS        TD(TD_BS_OC)
#define TD_BR        TD(TD_BR_OC)
#define TD_BC        TD(TD_BC_OC)
#define TD_BA        TD(TD_BA_OC)
#define TD_SFT_CAP   TD(TD_SFT_CAPS)
#define SCRE_UP LGUI(LSFT(LCTL(KC_Q)))
#define SCRE_DN LGUI(LSFT(LCTL(KC_A)))
#define __________   KC_TRNS
#define XXXXXXXXXX   KC_NO
//
//

const uint16_t PROGMEM fn_actions[] = {
    [0] = ACTION_FUNCTION(0),
    [1] = ACTION_FUNCTION(1),
};

void action_function(keyrecord_t *record, uint8_t id, uint8_t opt) {
    static uint8_t shift_esc_shift_mask;
    shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
    if (record->event.pressed) {
        switch (id) {
            case 0:
                if (shift_esc_shift_mask) {
                    clear_mods();
                    register_code (KC_SLSH);
                    unregister_code (KC_SLSH);
                } else {
                    register_code (KC_COMM);
                    unregister_code (KC_COMM);
                }
                break;
            case 1:
                if (shift_esc_shift_mask) {
                    register_code (KC_LSFT);
                    register_code (KC_GRV);
                    unregister_code (KC_GRV);
                    unregister_code (KC_LSFT);
                } else {
                    register_code (KC_DOT);
                    unregister_code (KC_DOT);
                }
                    break;
        }
    }
};


void TD_BS_OC_f(qk_tap_dance_state_t *state, void *user_data) {
    if (state->count == 1) {
        register_code (KC_LBRC);
    } else {
        register_code (KC_LBRC);
        register_code (KC_RBRC);
        register_code (KC_LEFT);
    }
}

void TD_BS_OC_r (qk_tap_dance_state_t *state, void *user_data) {
    if (state->count == 1) {
        unregister_code (KC_LBRC);
    } else {
        unregister_code (KC_LBRC);
        unregister_code (KC_RBRC);
        unregister_code (KC_LEFT);
    }
}
void TD_BR_OC_f(qk_tap_dance_state_t *state, void *user_data) {
    if (state->count == 1) {
        register_code (KC_LSFT);
        register_code (KC_9);
    } else {
        register_code (KC_LSFT);
        register_code (KC_9);
        register_code (KC_0);
        unregister_code (KC_LSFT);
        register_code (KC_LEFT);
    }
}

void TD_BR_OC_r (qk_tap_dance_state_t *state, void *user_data) {
    if (state->count == 1) {
        unregister_code (KC_LSFT);
        unregister_code (KC_9);
    } else {
        unregister_code (KC_9);
        unregister_code (KC_0);
        unregister_code (KC_LEFT);
    }
}
void TD_BC_OC_f(qk_tap_dance_state_t *state, void *user_data) {
    if (state->count == 1) {
        register_code (KC_LSFT);
        register_code (KC_LBRC);
    } else {
        register_code (KC_LSFT);
        register_code (KC_LBRC);
        register_code (KC_RBRC);
        unregister_code (KC_LSFT);
        register_code (KC_LEFT);
    }
}

void TD_BC_OC_r (qk_tap_dance_state_t *state, void *user_data) {
    if (state->count == 1) {
        unregister_code (KC_LSFT);
        unregister_code (KC_LBRC);
    } else {
        unregister_code (KC_LBRC);
        unregister_code (KC_RBRC);
        unregister_code (KC_LEFT);
    }
}
void TD_BA_OC_f(qk_tap_dance_state_t *state, void *user_data) {
    if (state->count == 1) {
        register_code (KC_LSFT);
        register_code (KC_COMM);
    } else {
        register_code (KC_LSFT);
        register_code (KC_COMM);
        register_code (KC_DOT);
        unregister_code (KC_LSFT);
        register_code (KC_LEFT);
    }
}

void TD_BA_OC_r (qk_tap_dance_state_t *state, void *user_data) {
    if (state->count == 1) {
        unregister_code (KC_LSFT);
        unregister_code (KC_COMM);
    } else {
        unregister_code (KC_COMM);
        unregister_code (KC_DOT);
        unregister_code (KC_LEFT);
    }
}
//Tap Dance Declarations
enum {
  TD_SFT_CAPS = 0,
  TD_BS_OC = 1,
  TD_BR_OC = 2,
  TD_BC_OC = 3,
  TD_BA_OC = 4,
  TD_SFT_ENT = 5,
  TD_SFT_SPC = 6,
};

//Tap Dance Definitions
qk_tap_dance_action_t tap_dance_actions[] = {
  //Tap once for one shot SPACE, twice for Caps Lock
  [TD_SFT_CAPS]  = ACTION_TAP_DANCE_DOUBLE(KC_LSFT, KC_CAPS),
  [TD_SFT_ENT]  = ACTION_TAP_DANCE_DOUBLE(KC_LSFT, KC_ENT),
  [TD_SFT_SPC]  = ACTION_TAP_DANCE_DOUBLE(KC_LSFT, KC_SPACE),
  [TD_BS_OC]  = ACTION_TAP_DANCE_FN_ADVANCED (NULL , TD_BS_OC_f , TD_BS_OC_r),
  [TD_BR_OC]  = ACTION_TAP_DANCE_FN_ADVANCED (NULL , TD_BR_OC_f , TD_BR_OC_r),
  [TD_BC_OC]  = ACTION_TAP_DANCE_FN_ADVANCED (NULL , TD_BC_OC_f , TD_BC_OC_r),
  [TD_BA_OC]  = ACTION_TAP_DANCE_FN_ADVANCED (NULL , TD_BA_OC_f , TD_BA_OC_r),
// Other declarations would go here, separated by commas, if you have them
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

    //  Mouse/Move-Layer und QWERTY/Game Layer einfuegen
    //  was fuer die Umlate ueberlegen .....
    
#ifdef MIDDLE
/* Colemak
 * ,-----------------------------------------. ,-----------------------------------------.
 * |  Q   |  W   |  F   |  P   |  G   |      | |      |  J   |  L   |  U   |  Y   |  ;   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |  A   |  R   |  S   |  T   |  D   |      | |      |  H   |  N   |  E   |  I   |  O   |  für T und N: MT(MOD_LSFT, KC_T)
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |  Z   |  X   |  C   |  V   |  B   |SFT CA| |      |  K   |  M   |  ,/! |  ./? |  '   |  Funktion fuer , und .
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * | LCTL | LGUI | LALT |ESCNUM|SFT SP|TABSYM| | BSPC | LSFT | ENT  | RALT | RGUI | RCTL |
 * `-----------------------------------------' `-----------------------------------------'
*/

[_COLEMAK] = LAYOUT_ortho_4x12( \
   KC_Q   ,  KC_W   ,   KC_F   ,   KC_P   ,   KC_G   , KC_NO    ,  SHIFT   ,   KC_J   ,   KC_L   ,   KC_U   ,   KC_Y   , KC_SCLN  , \
   KC_A   ,  KC_R   ,   KC_S   ,   KC_T   ,   KC_D   ,  KC_NO   ,  KC_NO   ,   KC_H   ,   KC_N   ,   KC_E   ,   KC_I   ,  KC_O    , \
   KC_Z   ,  KC_X   ,   KC_C   ,   KC_V   ,   KC_B   ,TD_SFT_CAP,  KC_NO   ,   KC_K   ,   KC_M   ,  F(0)    ,  F(1)    , KC_QUOT , \
  OSM_CTL , OSM_GUI , OSM_ALT  , ESC_NUM  , SPC_SFTL , TAB_SYM  ,  KC_BSPC , ENT_SFTR ,  MO(_MOV) , KC_RALT  ,  KC_RGUI , KC_RCTL   \
 ), 

[_SFT] = LAYOUT_ortho_4x12( \
   S(KC_Q)   ,  S(KC_W)   ,   S(KC_F)   ,   S(KC_P)   ,   S(KC_G)   , KC_NO    ,  KC_TRNS    ,   S(KC_J)   ,   S(KC_L)   ,   S(KC_U)   ,   S(KC_Y)   , S(KC_SCLN)  , \
   S(KC_A)   ,  S(KC_R)   ,   S(KC_S)   ,   S(KC_T)   ,   S(KC_D)   ,  KC_NO   ,     KC_NO   ,   S(KC_H)   ,   S(KC_N)   ,   S(KC_E)   ,   S(KC_I)   ,  S(KC_O)    , \
   S(KC_Z)   ,  S(KC_X)   ,   S(KC_C)   ,   S(KC_V)   ,   S(KC_B)   ,TD_SFT_CAP,     KC_NO   ,   S(KC_K)   ,   S(KC_M)   ,   KC_SLSH   ,  S(KC_GRV)  , S(KC_QUOT)  , \
  KC_TRNS    , KC_TRNS    , KC_TRNS     , KC_TRNS     ,  KC_TRNS    , KC_TRNS  ,  KC_TRNS    ,  KC_TRNS    ,  KC_TRNS   , KC_TRNS   ,  KC_TRNS    , KC_TRNS   \
 ), 

/*
 * ,-----------------------------------------. ,-----------------------------------------.
 * |      |      |      |      |      |      | |      |  /   |  7   |  8   |  9   |  *   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |      | |      |  ,   |  4   |  5   |  6   |  +   | 
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |SFT CA| |      |  .   |  1   |  2   |  3   |  -   |  
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |ESCNUM|      |      | |      | RSFT |  0   |  =   |      |      |
 * `-----------------------------------------' `-----------------------------------------'
*/
[_NUM] =LAYOUT_ortho_4x12( \
  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_TRNS ,  KC_NO   , KC_SLASH ,   KC_7   ,   KC_8   ,   KC_9   ,  KC_ASTR , \
  S(KC_7) ,  S(KC_6) ,  S(KC_5) ,  S(KC_4) ,S(KC_MINS),  KC_NO   ,  KC_NO   ,  KC_COMM ,   KC_4   ,   KC_5   ,   KC_6   ,  KC_PLUS , \
S(KC_SLSH),  S(KC_3) ,  S(KC_2) , S(KC_1)  ,  KC_NO   ,  KC_TRNS ,  KC_NO   ,   KC_DOT ,   KC_1   ,   KC_2   ,   KC_3   , KC_MINUS , \
  KC_TRNS ,  KC_TRNS ,  KC_TRNS , ESC_NUM  ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS , KC_EQUAL ,   KC_0   , KC_TRNS  ,  KC_TRNS ,  KC_TRNS  \
 ), 

/*
 * ,-----------------------------------------. ,-----------------------------------------.
 * |PG UP | HOME | UP   |  END |      |      | |      |  +   |   [  |   ]  |  <   |  >   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |PG DWN| LEFT | DOWN | RIGHT|      |      | |      |  -   |   (  |   )  |  |   |  \   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |SFT CA| |      |  =   |   {  |   }  |  ?   |  `   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |      | | DEL  |SF ENT|      |      |      |      |
 * `-----------------------------------------' `-----------------------------------------'
*/

[_SYM] =LAYOUT_ortho_4x12( \
 KC_F12   , KC_F11   , KC_F10   , KC_F9    ,  KC_NO   ,  KC_TRNS ,  KC_NO   , KC_PLUS  ,   TD_BS    , KC_RBRC  ,  TD_BA   ,  KC_GT   , \
 KC_F8    , KC_F7    , KC_F6    , KC_F5    ,  KC_NO   ,  KC_NO   ,  KC_NO   , KC_MINUS ,   TD_BR    , KC_RPRN  ,  TD_BC   , KC_RCBR  , \
 KC_F4    , KC_F3    , KC_F2    , KC_F1    , KC_NO    , KC_NO    ,  KC_NO   , KC_EQUAL ,  KC_PIPE   ,  KC_BSLS ,  KC_QUES ,  KC_GRAVE, \
 KC_TRNS  , KC_TRNS  , KC_TRNS  , KC_TRNS  , KC_TRNS  , KC_TRNS  ,  KC_TRNS , KC_TRNS  , KC_TRNS    , KC_TRNS  ,  KC_TRNS ,  KC_TRNS  \
 ), 

[_MOV] =LAYOUT_ortho_4x12( \
  KC_PGUP ,  KC_HOME ,  KC_UP   ,  KC_END  ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  i3_S_7  ,  i3_S_8  ,  i3_S_9  ,  KC_NO   , \
  KC_PGDN ,  KC_LEFT ,  KC_DOWN ,  KC_RGHT ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  i3_S_4  ,  i3_S_5  ,  i3_S_6  ,  KC_NO   , \
  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  i3_S_1  ,  i3_S_2  ,  i3_S_3  ,  KC_NO   , \
  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS \
 ), 
#endif

#ifdef SIDE

/* Colemak
 * ,-----------------------------------------. ,-----------------------------------------.
 * |  Q   |  W   |  F   |  P   |  G   |      | |      |  J   |  L   |  U   |  Y   |  ;   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |  A   |  R   |  S   |  T   |  D   |      | |      |  H   |  N   |  E   |  I   |  O   |  für T und N: MT(MOD_LSFT, KC_T)
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |  Z   |  X   |  C   |  V   |  B   |SFT CA| |      |  K   |  M   |  ,/! |  ./? |  '   |  Funktion fuer , und .
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * | LCTL | LGUI | LALT |ESCNUM|SFT SP|TABSYM| | BSPC | LSFT | ENT  | RALT | RGUI | RCTL |
 * `-----------------------------------------' `-----------------------------------------'
     */

[_COLEMAK] = LAYOUT_ortho_4x12( \
   KC_ESC ,  KC_Q   ,  KC_W   ,   KC_F   ,   KC_P   ,   KC_G   ,   KC_J   ,   KC_L   ,   KC_U   ,   KC_Y   , KC_SCLN  , KC_BSPC ,\
   KC_TAB ,  KC_A   ,  KC_R   ,   KC_S   ,   KC_T   ,   KC_D   ,   KC_H   ,   KC_N   ,   KC_E   ,   KC_I   ,  KC_O    , KC_ENT  ,\
   KC_LSFT,  KC_Z   ,  KC_X   ,   KC_C   ,   KC_V   ,   KC_B   ,   KC_K   ,   KC_M   ,  F(0)    ,  F(1)    , KC_QUOT  , TD_SFT_CAP ,\
  OSM_CTL , OSM_GUI , OSM_ALT  , SYM     , NUM      ,  KC_SPC  ,  KC_SPC  ,  MOV     , KC_NO    , KC_RALT  ,  KC_RGUI , KC_RCTL   \
 ), 

/* Numerics
 * ,-----------------------------------------. ,-----------------------------------------.
 * |      |      |      |      |      |      | |      |  /   |  7   |  8   |  9   |  *   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |      | |      |  ,   |  4   |  5   |  6   |  +   | 
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |SFT CA| |      |  .   |  1   |  2   |  3   |  -   |  
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |ESCNUM|      |      | |      | RSFT |  0   |  =   |      |      |
 * `-----------------------------------------' `-----------------------------------------'
 */

[_NUM] =LAYOUT_ortho_4x12( \
  KC_TRNS ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   , KC_SLASH ,   KC_7   ,   KC_8   ,   KC_9   ,  KC_ASTR , KC_TRNS ,\
  KC_TRNS ,  S(KC_7) ,  S(KC_6) ,  S(KC_5) ,  S(KC_4) ,S(KC_MINS),  KC_COMM ,   KC_4   ,   KC_5   ,   KC_6   ,  KC_PLUS , KC_TRNS , \
  KC_TRNS ,S(KC_SLSH),  S(KC_3) ,  S(KC_2) , S(KC_1)  ,  KC_NO   ,   KC_DOT ,   KC_1   ,   KC_2   ,   KC_3   , KC_MINUS , KC_TRNS , \
  KC_TRNS ,  KC_TRNS ,  KC_TRNS , KC_TRNS  ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,   KC_0   , KC_EQUAL , KC_TRNS  ,  KC_TRNS ,  KC_TRNS  \
 ), 

/* SYM
 * ,-----------------------------------------. ,-----------------------------------------.
 * |PG UP | HOME | UP   |  END |      |      | |      |  +   |   [  |   ]  |  <   |  >   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |PG DWN| LEFT | DOWN | RIGHT|      |      | |      |  -   |   (  |   )  |  |   |  \   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |SFT CA| |      |  =   |   {  |   }  |  ?   |  `   |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |      | | DEL  |SF ENT|      |      |      |      |
 * `-----------------------------------------' `-----------------------------------------'
 */
[_SYM] =LAYOUT_ortho_4x12( \
 KC_TRNS ,  KC_F12   , KC_F11   , KC_F10   , KC_F9    ,  KC_NO   , KC_PLUS  ,   TD_BS    , KC_RBRC  ,  TD_BA   ,  KC_GT   ,  KC_DEL  , \
 KC_TRNS ,  KC_F8    , KC_F7    , KC_F6    , KC_F5    ,  KC_NO   , KC_MINUS ,   TD_BR    , KC_RPRN  ,  TD_BC   , KC_RCBR  , KC_TRNS , \
 KC_TRNS ,  KC_F4    , KC_F3    , KC_F2    , KC_F1    , KC_NO    , KC_EQUAL ,  KC_PIPE   ,  KC_BSLS ,  KC_QUES ,  KC_GRAVE, KC_TRNS , \
 KC_TRNS , KC_TRNS  , KC_TRNS  , KC_TRNS  , KC_TRNS  , KC_TRNS  ,  KC_TRNS , KC_TRNS  , KC_TRNS    , KC_TRNS  ,  KC_TRNS ,  KC_TRNS  \
 ), 

[_MOV] =LAYOUT_ortho_4x12( \
  KC_TRNS ,  KC_PGUP ,  KC_HOME ,  KC_UP   ,  KC_END  ,  KC_NO   ,  KC_NO   ,  i3_S_7  ,  i3_S_8  ,  i3_S_9  ,  KC_NO   , KC_TRNS  ,\
  KC_TRNS ,  KC_PGDN ,  KC_LEFT ,  KC_DOWN ,  KC_RGHT ,  KC_NO   ,  KC_NO   ,  i3_S_4  ,  i3_S_5  ,  i3_S_6  ,  KC_NO   , KC_TRNS  ,\
  KC_TRNS ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  KC_NO   ,  i3_S_1  ,  i3_S_2  ,  i3_S_3  ,  KC_NO   , KC_TRNS  ,\
  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS ,  KC_TRNS \
 ), 
#endif


};


void persistent_default_layer_set(uint16_t default_layer) {
  eeconfig_update_default_layer(default_layer);
  default_layer_set(default_layer);
}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  static uint8_t shift_esc_shift_mask;
  switch (keycode) {
    case QWERTY:
      if (record->event.pressed) {
        set_single_persistent_default_layer(_QWERTY);
        //default_layer_set(1UL<<_QWERTY);
        //persistent_default_layer_set(1UL<<_QWERTY);
        //layer_on(_QWERTY);
      }
      return false;
      break;
    case COLEMAK:
      if (record->event.pressed) {
        set_single_persistent_default_layer(_COLEMAK);
        //default_layer_set(1UL<<_TEST);
        //persistent_default_layer_set(1UL<<_QWERTY);
        //layer_on(_TEST);
      }
      return false;
      break;
    case NUM:
      if (record->event.pressed) {
        layer_on(_NUM);
        //update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      } else {
        layer_off(_NUM);
        //update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      }
      return false;
      break;
    case MOV:
      if (record->event.pressed) {
        layer_on(_MOV);
        //update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      } else {
        layer_off(_MOV);
        //update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      }
      return false;
      break;
     case SYM:
      if (record->event.pressed) {
        layer_on(_SYM);
        //update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      } else {
        layer_off(_SYM);
        //update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      }
      return false;
      break;
    //------------------------------------------------------
    case i3_S_1:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("1")));
        } else {
          SEND_STRING(SS_LGUI("1"));
        }
      }
      return false;
      break;
    case i3_S_2:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("2")));
        } else {
          SEND_STRING(SS_LGUI("2"));
        }
      }
      return false;
      break;
    case i3_S_3:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("3")));
        } else {
          SEND_STRING(SS_LGUI("3"));
        }
      }
      return false;
      break;
    case i3_S_4:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("4")));
        } else {
          SEND_STRING(SS_LGUI("4"));
        }
      }
      return false;
      break;
    case i3_S_5:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("5")));
        } else {
          SEND_STRING(SS_LGUI("5"));
        }
      }
      return false;
      break;
    case i3_S_6:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("6")));
        } else {
          SEND_STRING(SS_LGUI("6"));
        }
      }
      return false;
      break;
    case i3_S_7:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("7")));
        } else {
          SEND_STRING(SS_LGUI("7"));
        }
      }
      return false;
      break;
    case i3_S_8:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("8")));
        } else {
          SEND_STRING(SS_LGUI("8"));
        }
      }
      return false;
      break;
    case i3_S_9:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT(SS_LGUI("9")));
        } else {
          SEND_STRING(SS_LGUI("9"));
        }
      }
      return false;
      break;
  return true;
  /*
    case DOT_SLSH:
      shift_esc_shift_mask = get_mods()&MODS_CTRL_MASK;
      if (record->event.pressed) {
        if (shift_esc_shift_mask) {
          SEND_STRING(SS_LSFT("/"));
        } else {
          SEND_STRING(".");
        }
      }
      return false;
      break;
  */
    }
  return true;
}
/*
uint32_t layer_state_set_user(uint32_t state) {
  return update_tri_layer_state(state, _FUNC1, _FUNC2, _ADJUST);
}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    case QWERTY:
      if (record->event.pressed) {
        set_single_persistent_default_layer(_QWERTY);
        //default_layer_set(1UL<<_QWERTY);
        //persistent_default_layer_set(1UL<<_QWERTY);
        //layer_on(_QWERTY);
      }
      return false;
      break;
    case COLEMAK:
      if (record->event.pressed) {
        set_single_persistent_default_layer(_COLEMAK);
        //default_layer_set(1UL<<_TEST);
        //persistent_default_layer_set(1UL<<_QWERTY);
        //layer_on(_TEST);
      }
      return false;
      break;
    case FUNC1:
      if (record->event.pressed) {
        layer_on(_FUNC1);
        update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      } else {
        layer_off(_FUNC1);
        update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      }
      return false;
      break;
    case FUNC2:
      if (record->event.pressed) {
        layer_on(_FUNC2);
        update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      } else {
        layer_off(_FUNC2);
        update_tri_layer(_FUNC1, _FUNC2, _ADJUST);
      }
      return false;
      break;
  }
  return true;
}
*/

/*
void TD_BR_OC (qk_tap_dance_state_t *state, void *user_data){
    if (state->count ==1) {
        register_code (KC_LPRN);
        unregister_code (KC_LPRN);
    } else {
        register_code (KC_LPRN);
        unregister_code (KC_LPRN);
        register_code (KC_RPRN);
        unregister_code (KC_RPRN);
        register_code (KC_LEFT);
        unregister_code (KC_LEFT);
    }
}

*/

/* Blank
 * ,-----------------------------------------. ,-----------------------------------------.
 * |      |      |      |      |      |      | |      |      |      |      |      |      |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |      | |      |      |      |      |      |      |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |      | |      |      |      |      |      |      |
 * |------+------+------+------+------+------| |------+------+------+------+------+------|
 * |      |      |      |      |      |      | |      |      |      |      |      |      |
 * `-----------------------------------------' `-----------------------------------------'
 */
